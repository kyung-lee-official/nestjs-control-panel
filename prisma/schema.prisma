generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["strictUndefinedChecks"]
    output          = "../node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Member {
    id          String            @id @default(uuid())
    email       String            @unique
    name        String
    password    String
    isVerified  Boolean?
    isFrozen    Boolean?          @default(false)
    memberRoles MemberRole[]
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt
    /**
     * applications/performance/stats
     */
    perfStats   PerformanceStat[]
}

model MemberRole {
    id            String          @id
    name          String
    superRoleId   String?
    superRole     MemberRole?     @relation("Hierarchy", fields: [superRoleId], references: [id])
    subRoles      MemberRole[]    @relation("Hierarchy")
    members       Member[]
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    /**
     * applications/performance
     */
    statSection   StatSection[]
    eventTemplate EventTemplate[]
}

model MemberServerSetting {
    id                Int     @id @default(autoincrement())
    allowPublicSignUp Boolean
    allowGoogleSignIn Boolean
}

model EventLog {
    id         Int      @id @default(autoincrement())
    memberId   String
    memberName String
    eventType  String
    createdAt  DateTime @default(now())
}

/**
 * internal/apps/performance.prisma
 */
model PerformanceStat {
    id           Int           @id @default(autoincrement())
    owner        Member        @relation(fields: [ownerId], references: [id])
    ownerId      String
    month        DateTime
    statSections StatSection[]
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
}

model StatSection {
    id           Int             @id @default(autoincrement())
    stat         PerformanceStat @relation(fields: [statId], references: [id])
    statId       Int
    weight       Int
    title        String
    description  String?
    memberRole   MemberRole      @relation(fields: [memberRoleId], references: [id])
    memberRoleId String
    events       Event[]
    createdAt    DateTime        @default(now())
    updatedAt    DateTime        @updatedAt
}

model EventTemplate {
    id           Int        @id @default(autoincrement())
    score        Float
    description  String
    memberRole   MemberRole @relation(fields: [memberRoleId], references: [id])
    memberRoleId String
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
}

/**
 * event is independent of event template, and should keep a snapshot of the template at the time of creation, instead of a reference
 * custom events are allowed, in which case the templateId will be null
 */
model Event {
    id                  Int            @id @default(autoincrement())
    templateId          Int?
    templateScore       Float?
    templateDescription String?
    section             StatSection    @relation(fields: [sectionId], references: [id])
    sectionId           Int
    approval            ApprovalType   @default(PENDING)
    score               Float
    amount              Int
    description         String
    attachments         String[]
    comments            EventComment[]
    createdAt           DateTime       @default(now())
    updatedAt           DateTime       @updatedAt
}

enum ApprovalType {
    PENDING
    APPROVED
    REJECTED
}

model EventComment {
    id        Int      @id @default(autoincrement())
    event     Event    @relation(fields: [eventId], references: [id])
    eventId   Int
    memberId  String
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

/**
 * internal/apps/sns-crawler.prisma
 */
model FacebookGroupSource {
    excelRow     Int
    groupAddress String @unique
    groupName    String
}

enum FacebookGroupRecordStatus {
    PENDING
    SUCCESS
    FAILED
}

model FacebookGroupRecord {
    id                       Int                       @id @default(autoincrement())
    excelRow                 Int
    groupAddress             String
    groupName                String
    status                   FacebookGroupRecordStatus
    memberCount              Int
    monthlyPostCount         Int
    facebookGroupCrawlTask   FacebookGroupCrawlTask    @relation(fields: [facebookGroupCrawlTaskId], references: [id])
    facebookGroupCrawlTaskId Int
}

model FacebookGroupCrawlTask {
    id           Int                   @id @default(autoincrement())
    sourceLength Int
    records      FacebookGroupRecord[]
    createdAt    DateTime              @default(now())
    updatedAt    DateTime              @updatedAt
}

model YouTubeDataToken {
    token          String    @unique
    isRecentlyUsed Boolean
    isExpired      Boolean
    quotaRunOutAt  DateTime?
}

model YouTubeDataSearchKeyword {
    id       Int    @id @default(autoincrement())
    excelRow Int
    keyword  String @unique
}

model YouTubeDataTask {
    id                      Int                      @id @default(autoincrement())
    youTubeDataTaskKeywords YouTubeDataTaskKeyword[]
    searches                YouTubeDataApiSearch[]
    channels                YouTubeDataApiChannel[]
    videos                  YouTubeDataApiVideo[]
    timeRangeStart          DateTime?
    timeRangeEnd            DateTime?
    targetResultCount       Int?
    createdAt               DateTime                 @default(now())
    updatedAt               DateTime                 @updatedAt
}

enum YouTubeDataTaskKeywordStatus {
    PENDING
    SUCCESS
    FAILED
}

model YouTubeDataTaskKeyword {
    id       Int                          @id @default(autoincrement())
    excelRow Int
    keyword  String
    status   YouTubeDataTaskKeywordStatus @default(PENDING)
    task     YouTubeDataTask              @relation(fields: [taskId], references: [id])
    taskId   Int
}

model YouTubeDataApiSearch {
    id                Int             @id @default(autoincrement())
    keyword           String
    videoId           String
    publishedAt       DateTime
    channelId         String
    youTubeDataTask   YouTubeDataTask @relation(fields: [youTubeDataTaskId], references: [id])
    youTubeDataTaskId Int
}

model YouTubeDataApiChannel {
    id                Int             @id @default(autoincrement())
    channelId         String
    channelTitle      String
    viewCount         BigInt
    subscriberCount   BigInt
    videoCount        BigInt
    youTubeDataTask   YouTubeDataTask @relation(fields: [youTubeDataTaskId], references: [id])
    youTubeDataTaskId Int
}

model YouTubeDataApiVideo {
    id                Int             @id @default(autoincrement())
    videoId           String
    title             String
    description       String
    durationAsSeconds Int
    viewCount         BigInt
    likeCount         BigInt
    favoriteCount     BigInt
    commentCount      BigInt
    YouTubeDataTask   YouTubeDataTask @relation(fields: [youTubeDataTaskId], references: [id])
    youTubeDataTaskId Int
}

/**
 * internal/apps/chitubox-docs-feedback.prisma
 */
model ChituboxManualFeedback {
    id        Int      @id @default(autoincrement())
    pageId    String
    url       String
    payload   String
    ip        String
    country   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

/**
 * internal/apps/retail/sales-data.prisma
 */
model RetailSalesDataBatch {
    id              Int               @id @default(autoincrement())
    retailSalesData RetailSalesData[]
    createdAt       DateTime          @default(now())
}

model RetailSalesData {
    id                   BigInt                 @id @default(autoincrement())
    retailSalesDataBatch RetailSalesDataBatch   @relation(fields: [batchId], references: [id])
    batchId              Int
    date                 DateTime
    receiptType          String
    client               String
    department           String
    product              RetailSalesDataProduct @relation(fields: [productId], references: [id])
    productId            Int
    salesVolume          Float
    platformAddress      String?
    platformOrderId      String
    storehouse           String
    category             String
    sourceAttribute      String
    taxInclusivePriceCny Float?
    priceCny             Float?
    unitPriceCny         Float?

    /**
     * indexes
     */
    @@index([batchId])
    @@index([date])
    @@index([receiptType])
    @@index([client])
    @@index([department])
    @@index([productId])
    @@index([salesVolume])
    @@index([platformAddress])
    @@index([platformOrderId])
    @@index([storehouse])
    @@index([category])
    @@index([sourceAttribute])
    @@index([taxInclusivePriceCny])
    @@index([priceCny])
    @@index([unitPriceCny])
}

// model RetailSalesDataReceiptType {
//     id              Int               @id @default(autoincrement())
//     receiptType     String            @unique
//     retailSalesData RetailSalesData[]
// }

// model RetailSalesDataClient {
//     id              Int               @id @default(autoincrement())
//     client          String            @unique
//     retailSalesData RetailSalesData[]
// }

// model RetailSalesDataDepartment {
//     id              Int               @id @default(autoincrement())
//     department      String            @unique
//     retailSalesData RetailSalesData[]
// }

model RetailSalesDataProduct {
    id              Int               @id @default(autoincrement())
    sku             String            @unique
    nameZhCn        String
    retailSalesData RetailSalesData[]
}

// model RetailSalesDataPlatformAddress {
//     id              Int               @id @default(autoincrement())
//     platformAddress String            @unique
//     retailSalesData RetailSalesData[]
// }

// model RetailSalesDataStorehouse {
//     id              Int               @id @default(autoincrement())
//     storehouse      String            @unique
//     retailSalesData RetailSalesData[]
// }

// model RetailSalesDataCategory {
//     id              Int               @id @default(autoincrement())
//     category        String            @unique
//     retailSalesData RetailSalesData[]
// }

// model RetailSalesDataSourceAttribute {
//     id              Int               @id @default(autoincrement())
//     sourceAttribute String            @unique
//     retailSalesData RetailSalesData[]
// }
