model FacebookGroupSource {
    groupAddress String @unique
    groupName    String
}

model FacebookGroupRecord {
    id                       Int                    @id @default(autoincrement())
    groupAddress             String
    groupName                String
    failed                   Boolean
    memberCount              Int
    monthlyPostCount         Int
    facebookGroupCrawlTask   FacebookGroupCrawlTask @relation(fields: [facebookGroupCrawlTaskId], references: [id])
    facebookGroupCrawlTaskId Int
}

model FacebookGroupCrawlTask {
    id           Int                   @id @default(autoincrement())
    sourceLength Int
    records      FacebookGroupRecord[]
    createdAt    DateTime              @default(now())
    updatedAt    DateTime              @updatedAt
}

model YouTubeDataToken {
    token          String    @unique
    isRecentlyUsed Boolean
    isExpired      Boolean
    quotaRunOutAt  DateTime?
}

model YouTubeDataSearchKeyword {
    id      Int    @id @default(autoincrement())
    keyword String @unique
}

model YouTubeDataTask {
    id                      Int                      @id @default(autoincrement())
    youTubeDataTaskKeywords YouTubeDataTaskKeyword[]
    searches                YouTubeDataApiSearch[]
    channels                YouTubeDataApiChannel[]
    videos                  YouTubeDataApiVideo[]
    createdAt               DateTime                 @default(now())
    updatedAt               DateTime                 @updatedAt
}

enum YouTubeDataTaskKeywordStatus {
    PENDING
    SUCCESS
    FAILED
}

model YouTubeDataTaskKeyword {
    id      Int                          @id @default(autoincrement())
    keyword String
    status  YouTubeDataTaskKeywordStatus @default(PENDING)
    task    YouTubeDataTask              @relation(fields: [taskId], references: [id])
    taskId  Int
}

model YouTubeDataApiSearch {
    id                Int             @id @default(autoincrement())
    keyword           String
    videoId           String
    publishedAt       DateTime
    channelId         String
    youTubeDataTask   YouTubeDataTask @relation(fields: [youTubeDataTaskId], references: [id])
    youTubeDataTaskId Int
}

model YouTubeDataApiChannel {
    id                Int             @id @default(autoincrement())
    channelId         String
    channelTitle      String
    viewCount         BigInt
    subscriberCount   BigInt
    videoCount        BigInt
    youTubeDataTask   YouTubeDataTask @relation(fields: [youTubeDataTaskId], references: [id])
    youTubeDataTaskId Int
}

model YouTubeDataApiVideo {
    id                Int             @id @default(autoincrement())
    videoId           String
    title             String
    description       String
    durationAsSeconds Int
    viewCount         BigInt
    likeCount         BigInt
    favoriteCount     BigInt
    commentCount      BigInt
    YouTubeDataTask   YouTubeDataTask @relation(fields: [youTubeDataTaskId], references: [id])
    youTubeDataTaskId Int
}
